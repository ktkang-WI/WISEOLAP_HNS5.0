/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.wise.MarketingPlatForm.report.domain.item.pivot.pivotmatrix.schema.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class AvroGroupParam extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6859412784404616627L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AvroGroupParam\",\"namespace\":\"com.wise.MarketingPlatForm.report.domain.item.pivot.pivotmatrix.schema.avro\",\"fields\":[{\"name\":\"selector\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"]},{\"name\":\"groupInterval\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"]},{\"name\":\"isExpanded\",\"type\":[\"boolean\",\"null\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<AvroGroupParam> ENCODER =
      new BinaryMessageEncoder<AvroGroupParam>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<AvroGroupParam> DECODER =
      new BinaryMessageDecoder<AvroGroupParam>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<AvroGroupParam> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<AvroGroupParam> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<AvroGroupParam>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this AvroGroupParam to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a AvroGroupParam from a ByteBuffer. */
  public static AvroGroupParam fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.String selector;
  @Deprecated public java.lang.String groupInterval;
  @Deprecated public java.lang.Boolean isExpanded;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AvroGroupParam() {}

  /**
   * All-args constructor.
   * @param selector The new value for selector
   * @param groupInterval The new value for groupInterval
   * @param isExpanded The new value for isExpanded
   */
  public AvroGroupParam(java.lang.String selector, java.lang.String groupInterval, java.lang.Boolean isExpanded) {
    this.selector = selector;
    this.groupInterval = groupInterval;
    this.isExpanded = isExpanded;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return selector;
    case 1: return groupInterval;
    case 2: return isExpanded;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: selector = (java.lang.String)value$; break;
    case 1: groupInterval = (java.lang.String)value$; break;
    case 2: isExpanded = (java.lang.Boolean)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'selector' field.
   * @return The value of the 'selector' field.
   */
  public java.lang.String getSelector() {
    return selector;
  }

  /**
   * Sets the value of the 'selector' field.
   * @param value the value to set.
   */
  public void setSelector(java.lang.String value) {
    this.selector = value;
  }

  /**
   * Gets the value of the 'groupInterval' field.
   * @return The value of the 'groupInterval' field.
   */
  public java.lang.String getGroupInterval() {
    return groupInterval;
  }

  /**
   * Sets the value of the 'groupInterval' field.
   * @param value the value to set.
   */
  public void setGroupInterval(java.lang.String value) {
    this.groupInterval = value;
  }

  /**
   * Gets the value of the 'isExpanded' field.
   * @return The value of the 'isExpanded' field.
   */
  public java.lang.Boolean getIsExpanded() {
    return isExpanded;
  }

  /**
   * Sets the value of the 'isExpanded' field.
   * @param value the value to set.
   */
  public void setIsExpanded(java.lang.Boolean value) {
    this.isExpanded = value;
  }

  /**
   * Creates a new AvroGroupParam RecordBuilder.
   * @return A new AvroGroupParam RecordBuilder
   */
  public static com.wise.MarketingPlatForm.report.domain.item.pivot.pivotmatrix.schema.avro.AvroGroupParam.Builder newBuilder() {
    return new com.wise.MarketingPlatForm.report.domain.item.pivot.pivotmatrix.schema.avro.AvroGroupParam.Builder();
  }

  /**
   * Creates a new AvroGroupParam RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AvroGroupParam RecordBuilder
   */
  public static com.wise.MarketingPlatForm.report.domain.item.pivot.pivotmatrix.schema.avro.AvroGroupParam.Builder newBuilder(com.wise.MarketingPlatForm.report.domain.item.pivot.pivotmatrix.schema.avro.AvroGroupParam.Builder other) {
    return new com.wise.MarketingPlatForm.report.domain.item.pivot.pivotmatrix.schema.avro.AvroGroupParam.Builder(other);
  }

  /**
   * Creates a new AvroGroupParam RecordBuilder by copying an existing AvroGroupParam instance.
   * @param other The existing instance to copy.
   * @return A new AvroGroupParam RecordBuilder
   */
  public static com.wise.MarketingPlatForm.report.domain.item.pivot.pivotmatrix.schema.avro.AvroGroupParam.Builder newBuilder(com.wise.MarketingPlatForm.report.domain.item.pivot.pivotmatrix.schema.avro.AvroGroupParam other) {
    return new com.wise.MarketingPlatForm.report.domain.item.pivot.pivotmatrix.schema.avro.AvroGroupParam.Builder(other);
  }

  /**
   * RecordBuilder for AvroGroupParam instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AvroGroupParam>
    implements org.apache.avro.data.RecordBuilder<AvroGroupParam> {

    private java.lang.String selector;
    private java.lang.String groupInterval;
    private java.lang.Boolean isExpanded;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.wise.MarketingPlatForm.report.domain.item.pivot.pivotmatrix.schema.avro.AvroGroupParam.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.selector)) {
        this.selector = data().deepCopy(fields()[0].schema(), other.selector);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.groupInterval)) {
        this.groupInterval = data().deepCopy(fields()[1].schema(), other.groupInterval);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.isExpanded)) {
        this.isExpanded = data().deepCopy(fields()[2].schema(), other.isExpanded);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing AvroGroupParam instance
     * @param other The existing instance to copy.
     */
    private Builder(com.wise.MarketingPlatForm.report.domain.item.pivot.pivotmatrix.schema.avro.AvroGroupParam other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.selector)) {
        this.selector = data().deepCopy(fields()[0].schema(), other.selector);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.groupInterval)) {
        this.groupInterval = data().deepCopy(fields()[1].schema(), other.groupInterval);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.isExpanded)) {
        this.isExpanded = data().deepCopy(fields()[2].schema(), other.isExpanded);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'selector' field.
      * @return The value.
      */
    public java.lang.String getSelector() {
      return selector;
    }

    /**
      * Sets the value of the 'selector' field.
      * @param value The value of 'selector'.
      * @return This builder.
      */
    public com.wise.MarketingPlatForm.report.domain.item.pivot.pivotmatrix.schema.avro.AvroGroupParam.Builder setSelector(java.lang.String value) {
      validate(fields()[0], value);
      this.selector = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'selector' field has been set.
      * @return True if the 'selector' field has been set, false otherwise.
      */
    public boolean hasSelector() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'selector' field.
      * @return This builder.
      */
    public com.wise.MarketingPlatForm.report.domain.item.pivot.pivotmatrix.schema.avro.AvroGroupParam.Builder clearSelector() {
      selector = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'groupInterval' field.
      * @return The value.
      */
    public java.lang.String getGroupInterval() {
      return groupInterval;
    }

    /**
      * Sets the value of the 'groupInterval' field.
      * @param value The value of 'groupInterval'.
      * @return This builder.
      */
    public com.wise.MarketingPlatForm.report.domain.item.pivot.pivotmatrix.schema.avro.AvroGroupParam.Builder setGroupInterval(java.lang.String value) {
      validate(fields()[1], value);
      this.groupInterval = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'groupInterval' field has been set.
      * @return True if the 'groupInterval' field has been set, false otherwise.
      */
    public boolean hasGroupInterval() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'groupInterval' field.
      * @return This builder.
      */
    public com.wise.MarketingPlatForm.report.domain.item.pivot.pivotmatrix.schema.avro.AvroGroupParam.Builder clearGroupInterval() {
      groupInterval = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'isExpanded' field.
      * @return The value.
      */
    public java.lang.Boolean getIsExpanded() {
      return isExpanded;
    }

    /**
      * Sets the value of the 'isExpanded' field.
      * @param value The value of 'isExpanded'.
      * @return This builder.
      */
    public com.wise.MarketingPlatForm.report.domain.item.pivot.pivotmatrix.schema.avro.AvroGroupParam.Builder setIsExpanded(java.lang.Boolean value) {
      validate(fields()[2], value);
      this.isExpanded = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'isExpanded' field has been set.
      * @return True if the 'isExpanded' field has been set, false otherwise.
      */
    public boolean hasIsExpanded() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'isExpanded' field.
      * @return This builder.
      */
    public com.wise.MarketingPlatForm.report.domain.item.pivot.pivotmatrix.schema.avro.AvroGroupParam.Builder clearIsExpanded() {
      isExpanded = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public AvroGroupParam build() {
      try {
        AvroGroupParam record = new AvroGroupParam();
        record.selector = fieldSetFlags()[0] ? this.selector : (java.lang.String) defaultValue(fields()[0]);
        record.groupInterval = fieldSetFlags()[1] ? this.groupInterval : (java.lang.String) defaultValue(fields()[1]);
        record.isExpanded = fieldSetFlags()[2] ? this.isExpanded : (java.lang.Boolean) defaultValue(fields()[2]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<AvroGroupParam>
    WRITER$ = (org.apache.avro.io.DatumWriter<AvroGroupParam>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<AvroGroupParam>
    READER$ = (org.apache.avro.io.DatumReader<AvroGroupParam>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
